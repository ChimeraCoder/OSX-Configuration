self.w
self.e
obs
quit
self.w
int( '4d' )
dir( '4d' )
'3'.isdigit()
'30'.isdigit()
'10'.isdigit()
run johnModel.py
rand()
run johnModel.py
ls
np.linspace( 2 )
np.linspace( 2, 1 )
np.linspace( 0, 1 )
np.linspace( 0, 1, 10 )
np.surf
np.mesh
mesh
surf
meshgrid
meshgrid()
meshgrid(1,2)
help( meshgrid )
X, Y = meshgrid( linspace(0,1,10), linspace(0,1,10) )
X
plot( X, Y )
plot( X, Y, 'o')
flatten
help( flatten )
hstack( flatten(X), flatten(Y) )
hstack( [flatten(X), flatten(Y)] )
flatten(X)
hstack( [list(flatten(X)),list( flatten(Y))] )
hstack( [list(flatten(X)),list( flatten(Y))] )[0]
hstack( [list(flatten(X)),list( flatten(Y))] )[1]
vstack( [list(flatten(X)),list( flatten(Y))] )
vstack( [list(flatten(X)),list( flatten(Y))] )[0]
vstack( [list(flatten(X)),list( flatten(Y))] ).T
[ (x,y) for x in linspace(0,1,10) for y in linspace(0,1,10) ]
[ array(x,y) for x in linspace(0,1,10) for y in linspace(0,1,10) ]
[ array([x,y]) for x in linspace(0,1,10) for y in linspace(0,1,10) ]
plot( [ array([x,y]) for x in linspace(0,1,10) for y in linspace(0,1,10) ] 
)
plot( array([ array([x,y]) for x in linspace(0,1,10) for y in linspace(0,1,10) ])
)
plot( array([ array([x,y]) for x in linspace(0,1,10) for y in linspace(0,1,10) ])
, 'o')
clear()
close()
plot( array([ array([x,y]) for x in linspace(0,1,10) for y in linspace(0,1,10) ])
, 'o')
 array([ array([x,y]) for x in linspace(0,1,10) for y in linspace(0,1,10) ] )
array([ array([x,y]) for x in linspace(0,1,10) for y in linspace(0,1,10) ])
[ array([x,y]) for x in linspace(0,1,10) for y in linspace(0,1,10) ]
uniform
uniform(10)
uniform(1)
uniform(1,1)
uniform(1,2)
uniform(1,3)
uniform(3,3)
uniform(.7,1)
uniform(.8,1)
uniform(.8,1,10)
hstack( uniform(.8,1,10), uniform(0, .7, 10) )
hstack( [uniform(.8,1,10), uniform(0, .7, 10)] )
    unsup_xvals = np.hstack([np.uniform(0,.2, n//2), np.uniform(0,.2, n//2)])
    unsup_yvals = np.uniform( 0, 1, n )
unsup_xvals = np.hstack([np.uniform(0,.2, n//2), np.uniform(0,.2, n//2)])
pl.unifom
pl.uniform
help( uniform )
uniform
import numpy.random as nprand
nprand.randn()
randn()
False and False
False xor False
(False and False) or (not False and not False)
myfun = lambda x y: (x and y) or (not x and not y)
myfun = lambda x, y: (x and y) or (not x and not y)
xor = lambda x, y: (x and y) or (not x and not y)
xor( True, True)
xor( True, False)
xor = not( lambda x, y: (x and y) or (not x and not y) )
xor( True, False)
xor = lambda x, y: not( (x and y) or (not x and not y) )
xor( True, False)
xor( True, True)
xor( True, False)
xor( False, False)
xor( False, True )
self.nan
np.nan
`np.nan`
dir( [1,2] )
[1,2].reverse()
a = [1,2]
a.reverse
a.reverse)
a.reverse()
a
python
x = 2
x = " ;laksjd fklajsdlkfj a"
x.replace(" ", "_")
np.sin( np.pi )
np.sin( np.pi * 2 )
np.sin( np.pi * .5 )
ls
import exp
exp.construct_task()
import exp
task = exp.construct_task()
task
hist( [t[0] for t in task] )
import exp
task = exp.construct_task()
hist( [t[0] for t in task] )
hist( [t[0] for t in exp.construct_task()] )
hist( [t[0] for t in exp.construct_task() if not np.isnan( t[-1] ] )
hist( [t[0] for t in exp.construct_task() if not np.isnan( t[-1]) ] )
True * .5
False * .5
x = "this  is my desription."
x.replace( " ", "_" )
x
76 / 4
ls
!mvim exp.py
open( 'exp1-easy/0.dat' )
myfile = open( 'exp1-easy/0.dat' )
myfile
run johnModel.py
handle
run johnModel.py
debug
run johnModel.py
debug
run johnModel.py
debug
run johnModel.py
debug
run johnModel.py
0 / 9
1 / 9
1 / 9.
run johnModel.py
!mvim johnModel.py
run johnModel.py
import pygame as pg
pg.init()
screen = pygame.display.set_mode( (100, 100), HWSURFACE|DOUBLEBUF )
screen = pygame.dip.set_mode( (100, 100), HWSURFACE|DOUBLEBUF )
import pygame
screen = pygame.dip.set_mode( (100, 100), HWSURFACE|DOUBLEBUF )
screen = pygame.display.set_mode( (100, 100), HWSURFACE|DOUBLEBUF )
screen = pygame.display.set_mode( (100, 100), pg.HWSURFACE|pg.DOUBLEBUF )
screen = pygame.display.set_mode( (200, 200), pg.HWSURFACE|pg.DOUBLEBUF )
background = pygame.Surface( (100, 100) )
background = background.convert()
background.fill( (0,0,0) )
while 1:
    print pygame.event.poll()
while 1:
    eventg = pygame.event.poll()
while 1:
    event = pygame.event.poll()
    if event.type == pygame.MOUSEMOTION:
        print event
while 1:
    event = pygame.event.poll()
    if event.type == pygame.MOUSEMOTION:
        print event['buttons']
modelres
results
transpose(array( result ) )
transpose(array( results ) )
transpose(array( results ) )[0]
transpose(array( results ) )[0:2
transpose(array( results ) )[0:2]
transpose(array( results ) )[0:1] - transpose( array( results ))[1]
allkeys
model
human
human.values
human.values()
human.values() * 170
array( human.values()) * 170
array( human.values()) * 190
array( human.values()) * 200
array( human.values()) * 195
array( human.values()) * 197
array( human.values()) * 196
jarray( human.values()) * 196
quit
humanres
allhumandata
allhumandata[problem]
clusters_report
myres
humanres
outputSolutions( myres, humanres, 1)[:10]
outputSolutions( myres, humanres, 196)[:10]
model.keys
quit
flatten( zeros(( 3,3 )) )
ravel
np.ravel
y
flatten
flatten( zeros(( 3,3 )) )
ravel( zeros(( 3,3 )) )
y
import scipy.optimize
help( scipy.optimize.fmin )
from scipy.optimize import fmin
fmin( exp, array( 1 )
)
exp
from scipy.optimize import fmin
exp
help( exp )
fmin( exp, array(1) )
def myexp( x, y, z ):
    return exp( x )
fmin( myexp, array(1) )
fmin( myexp, array(1), (0,0) )
n
run john_fits.py
exp( 3 )
run john_fits.py
import numpy.random as nprand
uniform( 0,1,1 )
nprand.uniform( 0,1,1 )
x0 = nprand.uniform( 0,1,1 )
run john_fits.py
debug
run john_fits.py
version
%v
%version
run john_fits.py
debug
run john_fits.py
from scipy.optimize import fmin
fmin
from numpy impor *
from numpy import *
fmin( exp, array(1)
)
fmin( exp, array([0.1]) )
help( fmin )
from scipy.optimize import fmin
help( fmin (
)
)
help( fmin )
fmin( exp, array([0.1]) )
fmin( exp, array([0.1]), full_output=1 )
run john_fits.py
'skljdkl.png'[:-3]
'skljdkl.png'[:-4]
run exp.py
ls
import pygame
rect = pygame.Rect( 0, 0, 10, 10 )
dir( rect )
run exp.py
run 2dexp.py
debug
run 2dexp.py
run johnModel.py
debug
run johnModel.py
:w
run johnModel.py
tuple(1)
tuple([1[)
tuple([1])
tuple((1))
ls
x = [ (1,2,3), (5,4,3) ]
x
x = x[::-1]
x
x.sort()
x
sqrt( 961 )
np.linspace( 0, 6E-2, 30 )
import os
dir( os )
os.listdir( 'data' )
ls
import os
os.listdir( 'data' )
help( os.listdir )
isalphanum
dir( '1' 0
dir( '1' )
fns = [ 'data/' + fn for fn in os.listdir( 'data' ) if fn[0].isdigit() ]
fns
fhandle = open( fns[0] )
fhead = fhandle.readline()
fhead
fhead[5]
fhead[6]
fhead = fhead.strip().split()
fhead
fheadp[5]
fhead[4]
fhead[7]
fhead[9]
fhead[9] == '1.0'
ls
fhead[5]
fhead[6]
fhead[6]ls
ls
next = fhandle.readline().strip().spit()
next = fhandle.readline().strip().split()
next
next[3]
rest = fhandle.readlines()
rest
len( rest )
sofar = {}
sofar.keys()
os.join.path
os.joinpath
dir( os )
os.path.join
os.path.join( 'data', '1.dat' )
sofar.values()
ls
run get_sofar.py
import get_sofar
import get_sofar as sf
sf.get_sofar
sf.get_sofar()
sf.findlimits()
??date
?date
import datetime
datetime.date()
datetime.today()
datetime.date.today()
import os
os.date
dir( os )
os.times
os.times()
os.datetime.now()
datetime.now()
dir( datetime )
datetime.datetime.now(
)
datetime.datetime.now().strftime()
datetime.datetime.now().strftime(DATE_FORMAT)
import sys
sys.sleep( 1 )
sleep( 1 )
os.sleep( 1 )
import time
time.sleep( 1 )
plot ( [1:10] )
plot( range( 10 ) )
import numpy
numpy.argmin
numpy.argmin( [1,2,3] )
numpy.argwhere( [1,2,3] )
help( numpy.argwhere )
np.hit
np.hist
import numpy as np
np.hist
np.histogram
help( np.histogram 0
help( np.histogram )
count
import scipy as sp
sp.count
np.array( [1,2,3] ).count
np.array( [1,2,3] ).count()
[1,2,3].count
[1,2,3].count()
[1,2,3].count(1)
[1,2,3].count(12)
import os
os.path
dir( os.path)
help( os.path)
gammaln
help( gamma )
help( scipy.stats.distributions.gamma )
help( stats.distributions.gamma )
from scipy.stats import distributions
help( distributions.gamma )
help( gamma )
help( scipy )
import scipy
help( scipy )
help( scipy.special )
help( scipy.special.gammaln )
x = matrix([[1,2,3],[4,5,6]] )
x
scipy.special.gammaln( x )
scipy.special.gammaln( x, 2 )
scipy.special.gammaln( x, .5 )
help gammaln )
help( gammaln )
help( scipy.special.gammaln )
scipy.special.nargs
scipy.special.gammaln.nargs
dir( scipy.special.gammaln )
scipy.special.gammaln.outer
scipy.special.gammaln(2).outer
scipy.special.gammaln(2).nargs
scipy.special.gammaln( 2 )
form scipy.special import gammaln
from scipy.special import gammaln
gammaln( 2 0
gammaln( 2 )
gammaln( 1 )
gammaln( 3 )
gammaln( 0.2 )
exp( gammaln( 0.2 ) )
exp( gammaln( 1 ) )
exp( gammaln( 2 ) )
exp( gammaln( 3 ) )
exp( gammaln( 4 ) )
x = reshape( range(4), (2,2) )
x
sum( x )
sum( x,1)
x.size
ones( x.shape )
norm
norm( [1,2,3] )
normalize( [1,2,3] )
help( normalize )
help( normalize ).scaled
normalize( [1,2,3] ).scaled
help( normalize ).scaled()
normalize( [1,2,3] ).scaled(
)
normalize( [1,2,3], vmin=0, vmax=1 )
help( norm )
def lnMargLikDirichlet( counts, alpha ):
    return gammaln( sum(alpha, 1) ) + sum( gammaln( counts + alpha ), 1) -  sum( gammaln( alpha), 1) - gammaln( sum( counts + alpha), 1 )
lnMargLikDirichlet( [1,2], [.5, .5] )
lnMargLikDirichlet(array( [1,2]), array([.5, .5]) )
lnMargLikDirichlet(array( [1,2]), matrix([[.5, .5],[.5,.5]) )
lnMargLikDirichlet(array( [1,2]), matrix([[.5, .5],[.5,.5]]) )
lnMargLikDirichlet(array( [[1,2],[3,4]]), matrix([[.5, .5],[.5,.5]]) )
count = [1,2]
alpha = array( [.5,.5] )
apha
alpha
sum( alpha, 1 )
data = reshape( [1, 6, 4, 8], [2,2] )
sum( data, 0 )
sum( data, 0 ).T
data
matrix ( data )
matrix( [1,2,3,4], (2,2) )
matrix( [1,2,3,4], 2,2 )
matrix( reshape( range(4), (2,2) ) )
xmat matrix( reshape( range(4), (2,2) ) )
xmat = matrix( reshape( range(4), (2,2) ) )
sum( xmat )
sum( xmat, 0 )
sum( xmat, ,1 )
sum( xmat, 1 )
ones( 2 )
help( ones )
help( gammaln )
gammaln( matrix )
gammaln( xmat )
data
data = matrix( reshape( [1, 6, 4, 8], [2,2] ) )
counts0 = sum( data, 0 )
counts0
prior0 = alpha * matrix( ones( counts0.shape ) )
alpha
alpha = .5
prior0 = alpha * matrix( ones( counts0.shape ) )
prior0
help( ones 
)
ones( (2,1) )
counts0
sum( data, 0 )
sum( data, 1 )
counts0
counts0 = sum( data, 1 )
counts0
prior0 = alpha * matrix( ones( counts0.shape ) )
prior0
lnMargLikDirichlet( counts0, prior0 )
sum( alpha, 1 )
alpha
prior0
sum( prior0, 1 )
gammaln( sum( prior0, 1 ) )
sum( gammaln( counts + prior0 ) )
sum( gammaln( counts0 + prior0 ) )
sum( gammaln( alpha, 1 )
)
n
y
import numpy.random as nprand
nprand.shuffle
help( nprand.shuffle )
dir( np )
[ x for x in dir( np ) if x=='mean' ]
import scipy as sp
sp.stats
pwd
import numpy as np
np.equal( array([1,2,3]), array([1,2,3]) )
np.equal( np.array([1,2,3]), np.array([1,2,3]) )
run test_models.py
60 / 140.
(60 / 140.) * 100
quit
quit()
import scipy.stats
import scipy.stats as stats
stats
dir( stats )
[ x for x in  dir( stats ) if 'norm' in x \
[ x for x in  dir( stats ) if 'norm' in x ]
[ x for x in  dir( stats ) if 'Norm' in x ]
[ x for x in  dir( stats ) if 'Gaus' in x ]
[ x for x in  dir( stats ) if 'gaus' in x ]
[ x for x in  dir( stats ) if 'mult' in x ]
[ x for x in  dir( stats ) if 'Nult' in x ]
[ x for x in  dir( stats ) if 'Mult' in x ]
def find_in_dir( x, tag ):
    [ y for y in dir( x ) if tag in y ]
    
find_in_dir( stats, 'Mult' )
def find_in_dir( x, tag ):
    print [ y for y in dir( x ) if tag in y ]
def find_in_dir( x, tag ):
       print [ y for y in dir( x ) if tag in y ]
nprand.multivariate_normal
import numpy.random as nprand
nprand.multivariate_normal
help( nprand.multivariate_normal)
np.eye( 3 )
import numpy as np
np.eye( 3 )
np.eye( 3 ) * array([ 3,4,5])
np.eye( 3 ) * np.array([ 3,4,5])
nprand.multivariate_normal( [1,2], [[1,0],[0,1]] )
nprand.multivariate_normal( [1,2], [[1,0],[0,1]], 3 )
help( np.less_equal )
X = nprand.multivariate_normal( [1,2], [[1,0],[0,1]], 100 )
np.less( X, -2 )
np.less( X, -1 )
np.less( X, -0 )
X
np.less( X, -0 )
X
X = nprand.multivariate_normal( [0,0], [[1,0],[0,1]], 100 )
np.less( X, -0 )
np.sum( np.less( X, -0 ), 1 )
np.sum( np.less( X, -0 ), 0 )
np.less( X[:,0], -0 )
samples = nprand.multivariate_normal( [78.125, 45], np.eye(2)*np.array([5.2, 15]) )
samples
samples = nprand.multivariate_normal( [78.125, 45], np.eye(2)*np.array([5.2, 15]), 100 )
samples
samples = nprand.multivariate_normal( [78.125, 45], np.eye(2)*np.array([5.2**2, 15**2]), 100 )
samples
samples = nprand.multivariate_normal( [78.125, 45], np.eye(2)*np.array([5.2**2, 15**2]), 100 )
samples
min( samples[:,0] )
np.vstack( samples, samples )
np.vstack( [samples, samples] )
np.hstack( [samples, np.nan] )
x = np.array([[1,2],[3,4],[5,6]] )
x
nprand.shuffle( x )
x
help( np.cos )
help( np.sin 0
help( np.sin )
np.sin( 1 )
np.sin( np.pi 0
np.sin( np.pi )
np.sin( np.pi*2 )
np.sin( np.pi/2 )
360 / 180
run exp.py
pygame.quit
pygame.quit()
run exp.py
help( np.hstack )
x = np.reshape( np.arange(10), (2,5) )
x
x = np.reshape( np.arange(10), (5,2) )
x
np.hstack( x, range(5) )
np.hstack( [x, range(5)] )
np.hstack( [x, np.arange(5)] )
np.hstack( [x, np.arange(5, axis=1)] )
np.hstack( [x, np.reshape(np.arange(5), (5,1))] )
run exp.py
version
%version
help( np.array )
np.hstack( [x, np.arange(5)] )
np.hstack( [x, np.arange(5).T] )
run exp.py
x
y = nprand.shuffle( x )
y
x
run exp.py
78.125 + 35
171 + 35
run exp.py
run exp.py --quick
int( np.nan )
run exp.py --quick
run exp.py --runthrough
run exp.py
run exp.py --runthrough
import test_models
import test_models as tm
tm
tm.construct_task(nsup=30, order='i' )
plot( tm.construct_task(nsup=30, order='i' )[:,:2]
)
from pylab import *
plot( tm.construct_task(nsup=30, order='i' )[:,:2]
)
help( matplotlib.use )
matplotlib.use( 'x11' )
n
y
plot( [1,2,3] )
import matplotlib
matplotlib.use( 'x11' )
matplotlib.use( 'GTK' )
matplotlib.plot( [1,2,3] )
from pylab import *
import matplotlib as mp
mp.use( 'x11' )
mp.use( 'TkAgg' )
from pylab import *
plot( [1,2,3] )
import matplotlib as mp
mp.use( 'gdk' )
from pylab import *
mp.use( 'MacOSX' )
import matplotlib as mp
mp.use( 'MacOSX' )
from pylab import *
plot( [1,2,3] )
construct_task( nsup = 30, order='i' )
import test_models as tm
tm.construct_task( nsup = 30, order='i' )
plot( tm.construct_task( nsup = 30, order='i' )[:,:2] )
tm.construct_task( nsup = 30, order='i' )[:,:2]
plot( tm.construct_task( nsup = 30, order='i' )[:,:2], 'o' )
x = tm.construct_task( nsup = 30, order='i' )[:,:2]
x
plot( x[:,0], x[:,1], 'o' )
task = tm.construct_task( nsup = 30, order='i' )[:,:2]
As = [x[:2] for x in task if x[-1] == 1 ]
Bs = [x[:2] for x in task if x[-1] == 0 ]
nans = [x[:2] for x in task if np.nan( x[-1] )]
nans = [x[:2] for x in task if np.isnan( x[-1] )]
nans
As
task[0][-1]
task[0]
task = tm.construct_task( nsup = 30, order='i' )
As = [x[:2] for x in task if x[-1] == 1 ]
Bs = [x[:2] for x in task if x[-1] == 0 ]
A
As
Bs
nans = [x[:2] for x in task if np.isnan( x[-1] )]
nans
hold(on)
hold
hold()
hold('on')
close()
hold('on')
plot( As[:,0], As[:,1], 'o' )
As[:,0]
As
As = array( As )
As
Bs = array( Bs )
nans = array( nans )
plot( As[:,0], As[:,1], 'o' )
plot( Bs[:,0], Bs[:,1], 'go' )
plot( nans[:,0], nans[:,1], 'ko' )
np.filter
np.map
help( np.array_split )
hist
%hist
import test_models as tm
tm.plot_task( tm.construct_task( nsup=30 ) )
:w
tm.plot_task( tm.construct_task( nsup=2 ) )
pl.close()
close()
tm.plot_task( tm.construct_task( nsup=2 ) )
close()
tm.plot_task( tm.construct_task( nsup=30 ) )
tm.fit_sustain
tm.fit_sustain()
run test_models.py
run sustain.py
run test_models.py
self.D
x
self.catunitacts
x
a = map( exp( self.D * x), self.catunitacts )
a
self.D
self.D * x
a
exp( 1 )
exp( self.D * 0 )
self.catunitacts
self.catunitacts[0]
a
a[0]
a[0][0]
type( a )
type
type( a )
a
step
a
step
a
step
a
b
step
b
step
b
print b
print a
step
b
print b
step
b
print b
print a
step
outputprobs
step
outputprobs
step
c
\
c
where
a
b
up
a
where
up
down
outp
outputprobs
1-mask
outputprobs
quit
clusters_report[0]
clusters_report
dir( model )
model.catunitacts
model.activations
model.clusters
model.clusters[0]
len(model.clusters)
model.clusters
model.clusters[0]
model.clusters[1]
quit
c
quit
run test_models.py
close()
pl.close()
run test_models.py
pl.close()
run test_models.py
help( savetxt )
help( pl.savetxt )
x = array( [[1,2,3],[4,5,6]] )
x = np.array( [[1,2,3],[4,5,6]] )
x
x.hstack( [x, 1]  )
np.hstack( [x, 1]  )
np.hstack( [x, 1]  )
run test_models.py
all_resps
quit
all_resps
all_resps[0]
quit
import exp
pl.plot( exp.construct_task( )[:,:2], 'o' )
plot( exp.construct_task( )[:,:2], 'o' )
train = exp.construct_task()
plot( train[:,0], 'o' )
close
close()
plot( train[:,0], 'o' )
plot( train[:,0], train[:,1], 'o' )
close()
plot( train[:,0], train[:,1], 'o' )
test = exp.construct_task('test' )
plot( test[:,0], test[:,1], 'o' )
test
plot( test[:,0], test[:,1], 'o' )
!mvim exp.py
%hist
quit
quit()
from chaco.shell import *
from enthought.chaco.shell import *
chaco_commands()
help( plot )
x = arange(-pi, pi, pi/100.)
plot(x, sin(x), "b-")
x = arange(-pi, pi, pi/100.)
from numpy import *
x = arange(-pi, pi, pi/100.)
plot(x, sin(x), "b-")
chaco_commands()
help( plot )
help( chaco )
help( plot )
plot.__doc__
plot.__doc__()
plot(x, sin(x), "o")
close()
plot(x, sin(x), "o")
plot(x, sin(x), "-")
plot(x, sin(x), "-+")
plot(x, sin(x), "+")
plot(x, sin(x), "+RR")
plot(x, sin(x), "+", color="RR")
scatterplot( x )
%hist
chaco_commands()
title( "A sin curve" )
plot(x, sin(x), "b-")
plot(x, sin(x), "g-")
plot(x, sin(x), type="scatter")
close()
plot(x, sin(x), type="scatter")
quit()
y
origtv
origtv_rec
origtv_rect
origtv_rect.right
resize
origtv_rect.right * resize
origtv_rect.bottom
origtv_rect.bottom*resize
c
import pygame
pygame.__version__
pygame.key
help( pygame.key )
pygame.key.name
help( pygame.key.name )
n
ls
import pygame
pygame.key.get_repeat
pygame.key.get_repeat()
pygame.init()
pygame.key.get_repeat()
:w
help( pop )
help( [].pop )
help( clock.tick )
help( pygameclock.tick )
help( pygame.clock.tick )
help( pygame.time.clock.tick )
help( pygame.time.Clock.tick )
help( pygame.time.Clock )
help( pygame.time.Clock().tick )
mydict = dict(
'x':0,
help( dict )
x = {y=10,z=20}
x = {y:10,z:20}
x = {y=10,z=20}
x = {"y":10,"z":20}
x
for item in x:
    print item
font
pygame.font
x = pygame.font.Font( None, 32 )
x
dir( x )
x.size
x.size = 12
x
dir( x )
x.__class__
x.__get_ascent__
x.get_ascent
x.get_ascent()
x.get_bold()
x.get_height()
x.get_size()
x.get_linesize()
x.metrics
x.metrics()
import os
help( os )
os.listdir( '..' )
os.listdir( '.' )
help( os )
x
x = { x:3, y:4 }
x = { "x":3, "y":4 }
x
x["x"]
y = {"z":5}
x + y
help( x )
help( warn )
import warning
import warnings
help( warnings.warn )
help( warnings )
help( Exception )
help( RuntimeWarning )
quit
quit()
import numpy as np
np.random.multivariate_normal
help( np.random.multivariate_normal )
np.random.multivariate_normal( [1,2], [[1,0],[0,1]] )
np.random.multivariate_normal( [1,2], [[1,0],[0,1]], 10 )
{}.update
help( {}.update )
help( dict )
help( {}.update )
import sys
sys.warnoptions
run conf.py
import pypsyexp
sys.path.insert(0, os.path.abspath('../lib'))
import sys
sys.path.insert(0, os.path.abspath('../lib'))
import os
sys.path.insert(0, os.path.abspath('../lib'))
import pypsyexp
import sqlite3
my_places = sqlite3.connect( "places.sqlite" )
my_places
c = my_places.cursor()
help( sqlite3 0
help( sqlite3 )
help( sqlite3.dump )
dir( sqlite3 )
c.execute( 'select * from moz_places' )
x = []
x = c.fetchall()
x[0]
x[1]
x[2]
x[3]
x[4]
c.execute( 'select id,url,visit_count from moz_places' )
x = c.fetchall()
x[0]
x[2]
x[3]
x[4]
